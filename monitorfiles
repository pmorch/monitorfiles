#! /usr/bin/env -S perl -w
use strict;

=head1 monitorFiles

See README.md for documentation

=cut

# We could've done this:
#
# use lib glob('~/perl/File-Monitor-0.10/lib');
# use File::Monitor;
#
# But it really wasn't that difficult to implement the parts we need. So look
# at our budget version of File::Monitor below

use File::Basename;
use Getopt::Long;
# To sleep for fractions of a second
use Time::HiRes qw(sleep);

my $script = basename $0;

sub usage {
    my ($err) = @_;
    if ($err) {
        print "*Error*: $err\n";
    }
    print <<END;
$script [ options ] file file...

If any file changes, print that to STDOUT or run a command

Options:

-c, --command <command>
    Execute command if files change.
    If the command contains the {} substring <command> will be executed once
    for each file that has changed, with {} replaced with the name of the
    changed file.
    If not, <command> will be executed once if one or more files change.
-i, --inotify
    Use 'inotify' - linux only. Superior to polling, but only works on linux,
    and seems to only work if the file is changed by a process local to this
    machine, so lookout e.g. with remote mounts.
-p, --pollinterval <seconds>
    Check files for changes every <seconds> seconds. Defaults to 1 (s).
    Must be a multiple of 0.1.
-f, --file <file>
    Add files from <file> to the file arguments. One file file name pr. line

If any file changes, run command. Sleep between each test, defaulting to 1 sec.

You can also specify a list of files in the file: list. One file name pr. line.
END
    exit 1;
}

my %options;
my $getopt = new Getopt::Long::Parser;
$getopt->configure('gnu_getopt');
$getopt->getoptions(
    \%options,
    'help|h|?',
    'command|c=s',
    'inotify|i',
    'pollinterval|p=f',
    'filelist|f=s',
    )
    or die "Couldn't GetOptions";

if ( $options{help} ) {
    usage();
}

$options{'pollinterval'} //= 1;
$options{'pollinterval'} >= 0.1
    or usage ("$_ must be > 0.1");

my @files = @ARGV;

if ($options{filelist}) {
    open I, $options{filelist}
        or die "Couldn't open $options{filelist} for reading";
    my @list = <I>;
    close I;
    chomp @list;
    push @files, grep { -e $_ } @list;
    close I;
}

if (scalar(@files) == 0) {
    usage("No files found to monitor");
}

# use Data::Dumper; print Dumper(\@files);

sub notify {
    my (@changedFiles) = @_;
    if ($options{command}) {
        my $runCommand = sub {
            print "--- Executing: ", $_[0], " ---\n";
            system($_[0]);
            if ($?) {
                print "  *** FAILED ***\n";
            } else {
                print "  --- OK ---\n";
            }
        };
        if ($options{command} =~ /{}/) {
            foreach my $f (@changedFiles) {
                my $cmd = $options{command};
                $cmd =~ s/{}/$f/g;
                $runCommand->($cmd);
            }
        } else {
            $runCommand->($options{command});
        }
    } else {
        print "Changed:\n";
        foreach my $f (@changedFiles) {
            print "\t", $f, "\n";
        }
    }
}

my $settling = File::Monitor->new();
my $lastPollTime;

sub pollingLoop() {
    my $monitor = File::Monitor->new();

    foreach my $f (@files) {
        $monitor->watch($f);
    }

    $monitor->scan();

    while (1) {
        my @changes = $monitor->scan();
        if (@changes) {
            notify(map { $_->name} @changes);
        }
        sleep $options{'pollinterval'};
    }
}

sub inotifyLoop() {
    # Don't *use* this as that'll fail on other platforms, where Linux::Inotify
    # doesn't exist. At least let those platforms work without the --inotify
    # option
    eval {
        require Linux::Inotify2;
    };
    if ($@) {
        my $error = $@;
        chomp $error;
        die "require Linux::Inotify2 failed. Are you on linux? " .
            "Do you have that package installed? " .
            $error;
    }

    my $inotify = new Linux::Inotify2
        or die "Unable to create new inotify object: $!";

    # We only care for these events - finished writing file or file has moved.
    my $mask = Linux::Inotify2->IN_CLOSE_WRITE | Linux::Inotify2->IN_MOVE_SELF;

    foreach (@files) {
        # create watch
        $inotify->watch( $_, $mask )
            or die "watch creation for $_ failed";
    }

    while () {
        my @events = $inotify->read;
        unless ( @events > 0 ) {
            print "read error: $!";
            last;
        }

        # We've seen several events for the same file in the one @events array.
        # Be sure to only handle them once...
        my %fileEvents;

        foreach (@events) {
            $fileEvents{$_->fullname} //= 0;
            $fileEvents{$_->fullname} |= $_->mask;

        }
        my @changedFiles;
        foreach my $f (sort keys %fileEvents) {
            # printf "name: %s mask %d (%s)\n",
            #     $f, $fileEvents{$f}, getMaskNames($fileEvents{$f});
            if ($fileEvents{$f} & Linux::Inotify2->IN_MOVE_SELF) {
                print "*Warning*: $f was moved - no longer monitoring\n";
            }
            if ($fileEvents{$f} & Linux::Inotify2->IN_CLOSE_WRITE) {
                # print "$f was written to\n";
                push @changedFiles, $f;
            }
        }
        notify(@changedFiles);
    }
}

if ($options{inotify}) {
    inotifyLoop();
} else {
    pollingLoop();
}

package File::Monitor;

=head1 package File::Monitor

Mimics File::Monitor from CPAN, since it isn't in a debian package. It only
supports a *very* limited subset of File::Monitor:

    my $monitor = File::Monitor->new();
    $monitor->watch('/tmp/foobar');
    # This returns nothing
    $monitor->scan();
    # This returns nothing also
    system('touch /tmp/foobar');
    my @changes = $monitor->scan();
    foreach my $c (@changes) {
        printf "File: %s changed\n", $c->name();
    }

=cut

sub new {
    my ($class) = @_;
    return bless {}, $class;
}

sub watch {
    my ($self, $file) = @_;
    push @{$$self{watchFiles}}, $file;
}

sub scan {
    my ($self) = @_;
    exists $$self{watchFiles}
        or die "Call watch() first";
    my @changes;
    foreach my $f (@{$$self{watchFiles}}) {
        my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
            $atime,$mtime,$ctime,$blksize,$blocks) = stat($f);

        # If $ctime isn't defined, then possibly the file didn't exist (or it
        # got deleted or...). It could be because it is being rewritten. Lets
        # just skip it this time. If it is being rewritten, we'll catch it on
        # the next scan
        next
            unless defined $ctime && defined $mtime;

        my $newestTime = ( $ctime > $mtime ) ? $ctime : $mtime;
        if ( exists $$self{fileTime}{$f} &&
             $$self{fileTime}{$f} < $newestTime ) {
             push @changes, File::Monitor::File->new($f);
        }
        $$self{fileTime}{$f} = $newestTime;
    }
    return @changes;
}

package File::Monitor::File;

# Ok, so I haven't investigated the internals of File::Monitor, and so I have
# no idea if this is the same class/package name it uses for individual changes

sub new {
    my ($class, $name) = @_;
    return bless { name => $name }, $class;
}

sub name {
    my ($self) = @_;
    return $$self{name};
}
